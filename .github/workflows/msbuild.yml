name: Windows Build

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build:
    runs-on: windows-latest
    
    steps:
      - name: Cache Visual Studio Build Tools installer
        uses: actions/cache@v2
        with:
            path: vs_buildtools.exe
            key: ${{ runner.os }}-buildtools-${{ hashFiles('vs_buildtools.exe') }}
      
      - name: Install SFML
        uses: oprypin/install-sfml@v1
        with:
            sfml: 2.5.1
            config: debug
        
      - name: Checkout repository
        uses: actions/checkout@v3

     

      - name: Install Visual Studio 2019 Build Tools
        run: |
          # Download Visual Studio 2019 Build Tools installer
          Invoke-WebRequest -Uri 'https://aka.ms/vs/16/release/vs_buildtools.exe' -OutFile 'vs_buildtools.exe'

          # Install Visual Studio 2019 Build Tools
          Start-Process -Wait -FilePath '.\vs_buildtools.exe' -ArgumentList '--quiet', '--norestart', '--nocache', '--installPath', 'C:\BuildTools', '--add', 'Microsoft.VisualStudio.Workload.MSBuildTools', '--add', 'Microsoft.VisualStudio.Workload.VCTools', '--includeRecommended', '--includeOptional'

          
      - name: Set up MSBuild
        uses: microsoft/setup-msbuild@v1.1   
        
     # - name: Build Boost dynamic
     #   uses: egor-tensin/build-boost@v1.4
    #    id: boost
    #    with:
     #     version: 1.81.0
     ##     libraries: log filesystem program_options system
       #   platform: x64
       #   static: 1
       #   toolset: msvc142
        #  configuration: Debug

      - name: Build Boost manually
        run: |
            # Define Boost version and download URL
            $boostVersion = "1.81.0"
            $boostDownloadUrl = "https://boostorg.jfrog.io/artifactory/main/release/$boostVersion/source/boost_$($boostVersion -replace '\.', '_').tar.gz"
            
            # Set installation directory to D:\a\AgentTown\boost
            $installDir = "D:\a\AgentTown\boost"
            
            # Create installation directory if it doesn't exist
            if (-not (Test-Path -Path $installDir)) {
                New-Item -ItemType Directory -Path $installDir | Out-Null
            }
            
            # Download Boost
            $boostZipFile = Join-Path $installDir "boost_$($boostVersion -replace '\.', '_').tar.gz"
            Invoke-WebRequest -Uri $boostDownloadUrl -OutFile $boostZipFile
            
            # Extract Boost directly into the installation directory
            Write-Host "Extracting Boost..."
            tar -xzf $boostZipFile -C $installDir --strip-components 1
            
            # Set current working directory to Boost source directory
            $boostSrcDir = Join-Path $installDir "boost_$($boostVersion -replace '\.', '_')"
            Set-Location -Path $boostSrcDir
            
            # Bootstrap Boost.Build with MSVC 14.2
            & .\bootstrap.bat --with-toolset=msvc-14.2
            
            # Build and Install Boost with MSVC 14.2, link shared, and add --with-log
            & .\b2 install -j4 --prefix=$installDir toolset=msvc-14.2 link=shared --with-log
            
            Write-Host "Boost $boostVersion has been installed to $installDir"


        
      - name: Build project
        run: |
          msbuild /m /p:Configuration=Debug CAI.sln
          
      - name: Setup VSTest and add to PATH
        uses: darenm/Setup-VSTest@v1
        id: setup_vstest

      - name: Run VSTest
        id: run_vstest
        working-directory: x64\Debug\
        run: vstest.console.exe /Platform:x64 .\CAI_UnitTest.dll
